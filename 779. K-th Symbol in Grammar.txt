class Solution {
public:
    int kthGrammar(int n, int k) {
        // Base case: if we're at the first row, the answer is always 0.
        if (n == 1) return 0;
        
        // Find the midpoint of the current row.
        int mid = (1 << (n - 1)) / 2;  // This is 2^(n-2) (half the size of row n)
        
        // If k is in the first half, it's the same as in the previous row.
        if (k <= mid) {
            return kthGrammar(n - 1, k);  // Continue to the previous row
        } else {
            // If k is in the second half, it's the opposite of the previous row.
            return !kthGrammar(n - 1, k - mid);  // Flip the result
        }
    }
};
